{"ast":null,"code":"import _toConsumableArray from\"/Users/emskaplann/final_projects/03-module/emskaplann.github.io/to-do-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/emskaplann/final_projects/03-module/emskaplann.github.io/to-do-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";var ProjectService=function ProjectService(component){var _this=this;_classCallCheck(this,ProjectService);this.fetchProjects=function(userId){fetch(\"\".concat(_this.productionURL,\"/users/\").concat(userId,\"/projects\"),{headers:{\"Authorization\":_this.component.props.authProps.token}}).then(function(response){if(response.status>199&&response.status<300)return response.json();throw response.statusText;}).then(function(projects){var allTasks=projects.map(function(project){return project.tasks;}).flat();_this.component.setState({projects:projects,allTasks:allTasks});}).catch(function(reason){return console.log(reason);});};this.postProject=function(project){fetch(\"\".concat(_this.productionURL,\"/users/\").concat(project.userId,\"/projects\"),{method:\"POST\",headers:{\"Authorization\":_this.component.props.authProps.token,\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify(project)}).then(function(r){return r.json();}).then(function(newProject){return _this.component.setState({projects:[].concat(_toConsumableArray(_this.component.state.projects),[newProject])});});};this.postTask=function(task){fetch(\"\".concat(_this.productionURL,\"/projects/\").concat(task.projectId,\"/tasks\"),{method:\"POST\",headers:{\"Authorization\":_this.component.props.authProps.token,\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify(task)}).then(function(r){return r.json();}).then(function(newTask){var project=_this.component.state.projects.find(function(project){return project.id===newTask.project_id;});var projectCopy=Object.assign({},project);projectCopy.tasks=[].concat(_toConsumableArray(projectCopy.tasks),[newTask]);var newProjects=_this.component.state.projects.map(function(project){return project.id===projectCopy.id?projectCopy:project;});_this.component.setState({projects:newProjects,allTasks:newProjects.map(function(project){return project.tasks;}).flat()});});};this.updateProject=function(id,project){fetch(\"\".concat(_this.productionURL,\"/projects/\").concat(id),{method:\"PATCH\",headers:{\"Authorization\":_this.component.props.authProps.token,\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify({project:project})}).then(function(r){return r.json();}).then(function(updatedProject){return _this.component.setState({projects:_this.component.state.projects.map(function(proj){return proj.id===updatedProject.id?updatedProject:proj;})});});};this.component=component;this.productionURL='https://arcane-sands-50858.herokuapp.com';this.devURL='http://localhost:3000';};export{ProjectService as default};","map":{"version":3,"sources":["/Users/emskaplann/final_projects/03-module/emskaplann.github.io/to-do-app/src/services/ProjectService.js"],"names":["ProjectService","component","fetchProjects","userId","fetch","productionURL","headers","props","authProps","token","then","response","status","json","statusText","projects","allTasks","map","project","tasks","flat","setState","catch","reason","console","log","postProject","method","Accept","body","JSON","stringify","r","newProject","state","postTask","task","projectId","newTask","find","id","project_id","projectCopy","Object","assign","newProjects","updateProject","updatedProject","proj","devURL"],"mappings":"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","sourcesContent":["export default class ProjectService {\n  constructor(component) {\n    this.component = component\n    this.productionURL = 'https://arcane-sands-50858.herokuapp.com'\n    this.devURL = 'http://localhost:3000'\n  }\n\n  fetchProjects = (userId) => {\n    fetch(`${this.productionURL}/users/${userId}/projects`, {\n      headers: {\n        \"Authorization\": this.component.props.authProps.token\n      }\n    }).then(response => {\n      if (response.status > 199 && response.status < 300) return response.json()\n      throw response.statusText\n    }).then(projects => {\n      const allTasks = projects.map(project => project.tasks).flat()\n      this.component.setState({ projects, allTasks })\n    }).catch(reason => console.log(reason))\n  }\n\n  postProject = (project) => {\n    fetch(`${this.productionURL}/users/${project.userId}/projects`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify(project)\n    })\n      .then(r => r.json())\n      .then(newProject => this.component.setState({ projects: [...this.component.state.projects, newProject] }))\n  }\n\n  postTask = (task) => {\n    fetch(`${this.productionURL}/projects/${task.projectId}/tasks`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify(task)\n    })\n      .then(r => r.json())\n      .then(newTask => {\n        const project = this.component.state.projects.find(project => project.id === newTask.project_id)\n        const projectCopy = Object.assign({}, project)\n        projectCopy.tasks = [...projectCopy.tasks, newTask]\n        const newProjects = this.component.state.projects.map(project => project.id === projectCopy.id ? projectCopy : project)\n        this.component.setState({\n          projects: newProjects,\n          allTasks: newProjects.map(project => project.tasks).flat(),\n        })\n      })\n  }\n\n  updateProject = (id, project) => {\n    fetch(`${this.productionURL}/projects/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify({ project })\n    })\n      .then(r => r.json())\n      .then(updatedProject =>\n        this.component.setState({\n          projects: this.component.state.projects.map(proj => proj.id === updatedProject.id ? updatedProject : proj)\n        }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}