{"ast":null,"code":"import _classCallCheck from\"/Users/emskaplann/final_projects/03-module/emskaplann.github.io/to-do-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";var TaskService=function TaskService(component){var _this=this;_classCallCheck(this,TaskService);this.fetchAllTasksFor=function(projectId){fetch(\"\".concat(_this.workingURL,\"/projects/\").concat(projectId,\"/tasks\"),{headers:{\"Authorization\":_this.component.props.authProps.token}}).then(function(response){return response.json();}).then(function(tasks){return _this.component.setState({tasks:tasks});});};this.completeTask=function(taskId){fetch(\"\".concat(_this.workingURL,\"/tasks/\").concat(taskId),{method:\"PATCH\",headers:{\"Authorization\":_this.component.props.authProps.token,\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify({task:{is_completed:true}})}).then(function(r){return r.json();}).then(function(editedTask){var project=_this.component.state.projects.find(function(project){return project.id===editedTask.project_id;});var projectCopy=Object.assign({},project);projectCopy.tasks=projectCopy.tasks.map(function(task){return task.id===editedTask.id?editedTask:task;});var newProjects=_this.component.state.projects.map(function(project){return project.id===projectCopy.id?projectCopy:project;});_this.component.setState({projects:newProjects,allTasks:newProjects.map(function(project){return project.tasks;}).flat()});});};this.component=component;this.workingURL='https://arcane-sands-50858.herokuapp.com';// this.workingURL = 'http://localhost:3000'\n};export default TaskService;","map":{"version":3,"sources":["/Users/emskaplann/final_projects/03-module/emskaplann.github.io/to-do-app/src/services/TaskService.js"],"names":["TaskService","component","fetchAllTasksFor","projectId","fetch","workingURL","headers","props","authProps","token","then","response","json","tasks","setState","completeTask","taskId","method","Accept","body","JSON","stringify","task","is_completed","r","editedTask","project","state","projects","find","id","project_id","projectCopy","Object","assign","map","newProjects","allTasks","flat"],"mappings":"iKAAMA,CAAAA,W,CACJ,qBAAYC,SAAZ,CAAuB,uDAMvBC,gBANuB,CAMJ,SAACC,SAAD,CAAe,CAChCC,KAAK,WAAI,KAAI,CAACC,UAAT,sBAAgCF,SAAhC,WAAmD,CACtDG,OAAO,CAAE,CACP,gBAAiB,KAAI,CAACL,SAAL,CAAeM,KAAf,CAAqBC,SAArB,CAA+BC,KADzC,CAD6C,CAAnD,CAAL,CAKGC,IALH,CAKQ,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EALhB,EAMGF,IANH,CAMQ,SAAAG,KAAK,QAAI,CAAA,KAAI,CAACZ,SAAL,CAAea,QAAf,CAAwB,CAAED,KAAK,CAALA,KAAF,CAAxB,CAAJ,EANb,EAOD,CAdsB,MAgBvBE,YAhBuB,CAgBR,SAACC,MAAD,CAAY,CACzBZ,KAAK,WAAI,KAAI,CAACC,UAAT,mBAA6BW,MAA7B,EAAuC,CAC1CC,MAAM,CAAE,OADkC,CAE1CX,OAAO,CAAE,CACP,gBAAiB,KAAI,CAACL,SAAL,CAAeM,KAAf,CAAqBC,SAArB,CAA+BC,KADzC,CAEP,eAAgB,kBAFT,CAGPS,MAAM,CAAE,kBAHD,CAFiC,CAMvCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACtBC,IAAI,CAAE,CACJC,YAAY,CAAE,IADV,CADgB,CAAf,CANiC,CAAvC,CAAL,CAYGb,IAZH,CAYQ,SAAAc,CAAC,QAAIA,CAAAA,CAAC,CAACZ,IAAF,EAAJ,EAZT,EAaGF,IAbH,CAaQ,SAAAe,UAAU,CAAI,CAClB,GAAMC,CAAAA,OAAO,CAAG,KAAI,CAACzB,SAAL,CAAe0B,KAAf,CAAqBC,QAArB,CAA8BC,IAA9B,CAAmC,SAAAH,OAAO,QAAIA,CAAAA,OAAO,CAACI,EAAR,GAAeL,UAAU,CAACM,UAA9B,EAA1C,CAAhB,CACA,GAAMC,CAAAA,WAAW,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBR,OAAlB,CAApB,CACAM,WAAW,CAACnB,KAAZ,CAAoBmB,WAAW,CAACnB,KAAZ,CAAkBsB,GAAlB,CAAsB,SAAAb,IAAI,QAAIA,CAAAA,IAAI,CAACQ,EAAL,GAAYL,UAAU,CAACK,EAAvB,CAA4BL,UAA5B,CAAyCH,IAA7C,EAA1B,CAApB,CACA,GAAMc,CAAAA,WAAW,CAAG,KAAI,CAACnC,SAAL,CAAe0B,KAAf,CAAqBC,QAArB,CAA8BO,GAA9B,CAAkC,SAAAT,OAAO,QAAIA,CAAAA,OAAO,CAACI,EAAR,GAAeE,WAAW,CAACF,EAA3B,CAAgCE,WAAhC,CAA8CN,OAAlD,EAAzC,CAApB,CACA,KAAI,CAACzB,SAAL,CAAea,QAAf,CAAwB,CACtBc,QAAQ,CAAEQ,WADY,CAEtBC,QAAQ,CAAED,WAAW,CAACD,GAAZ,CAAgB,SAAAT,OAAO,QAAIA,CAAAA,OAAO,CAACb,KAAZ,EAAvB,EAA0CyB,IAA1C,EAFY,CAAxB,EAID,CAtBH,EAuBD,CAxCsB,CACrB,KAAKrC,SAAL,CAAiBA,SAAjB,CACA,KAAKI,UAAL,CAAkB,0CAAlB,CACA;AACD,C,CAuCH,cAAeL,CAAAA,WAAf","sourcesContent":["class TaskService {\n  constructor(component) {\n    this.component = component\n    this.workingURL = 'https://arcane-sands-50858.herokuapp.com'\n    // this.workingURL = 'http://localhost:3000'\n  }\n\n  fetchAllTasksFor = (projectId) => {\n    fetch(`${this.workingURL}/projects/${projectId}/tasks`, {\n      headers: {\n        \"Authorization\": this.component.props.authProps.token\n      }\n    })\n      .then(response => response.json())\n      .then(tasks => this.component.setState({ tasks }))\n  }\n\n  completeTask = (taskId) => {\n    fetch(`${this.workingURL}/tasks/${taskId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify({\n        task: {\n          is_completed: true\n        }\n      })\n    })\n      .then(r => r.json())\n      .then(editedTask => {\n        const project = this.component.state.projects.find(project => project.id === editedTask.project_id)\n        const projectCopy = Object.assign({}, project)\n        projectCopy.tasks = projectCopy.tasks.map(task => task.id === editedTask.id ? editedTask : task)\n        const newProjects = this.component.state.projects.map(project => project.id === projectCopy.id ? projectCopy : project)\n        this.component.setState({\n          projects: newProjects,\n          allTasks: newProjects.map(project => project.tasks).flat()\n        })\n      })\n  }\n}\n\nexport default TaskService\n"]},"metadata":{},"sourceType":"module"}