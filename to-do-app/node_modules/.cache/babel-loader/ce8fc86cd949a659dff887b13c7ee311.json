{"ast":null,"code":"export default class ProjectService {\n  constructor(component) {\n    this.fetchProjects = userId => {\n      fetch(\"\".concat(this.productionURL, \"/users/\").concat(userId, \"/projects\"), {\n        headers: {\n          \"Authorization\": this.component.props.authProps.token\n        }\n      }).then(response => {\n        if (response.status > 199 && response.status < 300) return response.json();\n        throw response.statusText;\n      }).then(projects => {\n        console.log(projects);\n        const allTasks = projects.map(project => project.tasks).flat();\n        this.component.setState({\n          projects,\n          allTasks\n        });\n      }).catch(reason => console.log(reason));\n    };\n\n    this.postProject = project => {\n      fetch(\"\".concat(this.productionURL, \"/users/\").concat(project.userId, \"/projects\"), {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": this.component.props.authProps.token,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(project)\n      }).then(r => r.json()).then(newProject => this.component.setState({\n        projects: [...this.component.state.projects, newProject]\n      }));\n    };\n\n    this.postTask = task => {\n      fetch(\"\".concat(this.productionURL, \"/projects/\").concat(task.projectId, \"/tasks\"), {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": this.component.props.authProps.token,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(task)\n      }).then(r => r.json()).then(newTask => {\n        const project = this.component.state.projects.find(project => project.id === newTask.project_id);\n        const projectCopy = Object.assign({}, project);\n        projectCopy.tasks = [...projectCopy.tasks, newTask];\n        const newProjects = this.component.state.projects.map(project => project.id === projectCopy.id ? projectCopy : project);\n        this.component.setState({\n          projects: newProjects,\n          allTasks: newProjects.map(project => project.tasks).flat()\n        });\n      });\n    };\n\n    this.updateProject = (id, project) => {\n      fetch(\"\".concat(this.productionURL, \"/projects/\").concat(id), {\n        method: \"PATCH\",\n        headers: {\n          \"Authorization\": this.component.props.authProps.token,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          project\n        })\n      }).then(r => r.json()).then(updatedProject => this.component.setState({\n        projects: this.component.state.projects.map(proj => proj.id === updatedProject.id ? updatedProject : proj)\n      }));\n    };\n\n    this.component = component;\n    this.productionURL = 'https://arcane-sands-50858.herokuapp.com';\n    this.devURL = 'http://localhost:3000';\n  }\n\n}","map":{"version":3,"sources":["/Users/emskaplann/final_projects/04-module/to-do-app-frontend/src/services/ProjectService.js"],"names":["ProjectService","constructor","component","fetchProjects","userId","fetch","productionURL","headers","props","authProps","token","then","response","status","json","statusText","projects","console","log","allTasks","map","project","tasks","flat","setState","catch","reason","postProject","method","Accept","body","JSON","stringify","r","newProject","state","postTask","task","projectId","newTask","find","id","project_id","projectCopy","Object","assign","newProjects","updateProject","updatedProject","proj","devURL"],"mappings":"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","sourcesContent":["export default class ProjectService {\n  constructor(component) {\n    this.component = component\n    this.productionURL = 'https://arcane-sands-50858.herokuapp.com'\n    this.devURL = 'http://localhost:3000'\n  }\n\n  fetchProjects = (userId) => {\n    fetch(`${this.productionURL}/users/${userId}/projects`, {\n      headers: {\n        \"Authorization\": this.component.props.authProps.token\n      }\n    }).then(response => {\n      if (response.status > 199 && response.status < 300) return response.json()\n      throw response.statusText\n    }).then(projects => {\n      console.log(projects)\n      const allTasks = projects.map(project => project.tasks).flat()\n      this.component.setState({ projects, allTasks })\n    }).catch(reason => console.log(reason))\n  }\n\n  postProject = (project) => {\n    fetch(`${this.productionURL}/users/${project.userId}/projects`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify(project)\n    })\n      .then(r => r.json())\n      .then(newProject => this.component.setState({ projects: [...this.component.state.projects, newProject] }))\n  }\n\n  postTask = (task) => {\n    fetch(`${this.productionURL}/projects/${task.projectId}/tasks`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify(task)\n    })\n      .then(r => r.json())\n      .then(newTask => {\n        const project = this.component.state.projects.find(project => project.id === newTask.project_id)\n        const projectCopy = Object.assign({}, project)\n        projectCopy.tasks = [...projectCopy.tasks, newTask]\n        const newProjects = this.component.state.projects.map(project => project.id === projectCopy.id ? projectCopy : project)\n        this.component.setState({\n          projects: newProjects,\n          allTasks: newProjects.map(project => project.tasks).flat(),\n        })\n      })\n  }\n\n  updateProject = (id, project) => {\n    fetch(`${this.productionURL}/projects/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify({ project })\n    })\n      .then(r => r.json())\n      .then(updatedProject =>\n        this.component.setState({\n          projects: this.component.state.projects.map(proj => proj.id === updatedProject.id ? updatedProject : proj)\n        }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}