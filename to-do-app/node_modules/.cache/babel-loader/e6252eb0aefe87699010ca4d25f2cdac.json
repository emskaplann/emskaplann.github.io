{"ast":null,"code":"import React from'react';import{Card,ListGroup}from'react-bootstrap';var getSpanText=function getSpanText(text,completeTask,task){if(text==='Due Today'){return React.createElement(\"span\",{className:\"flex-fill text-right\"},text,React.createElement(\"i\",{onClick:function onClick(){return completeTask(task.id);},className:\"fa fa-fw fa-check\",style:{fontSize:'1.5em',color:'#d3d3d3',marginLeft:3}}));}return React.createElement(\"span\",{className:\"flex-fill text-right\"},React.createElement(\"i\",{style:{color:\"red\"}},text),React.createElement(\"i\",{onClick:function onClick(){return completeTask(task.id);},className:\"fa fa-fw fa-check\",style:{fontSize:'1.5em',color:'#d3d3d3',marginLeft:3}}));};var UpcomingTasks=function UpcomingTasks(_ref){var tasks=_ref.tasks,dateFromState=_ref.dateFromState,completeTask=_ref.completeTask;// console.log(dateFromState)\n// console.log(tasks)\nvar upcomingTasks=tasks.filter(function(task){return new Date(task.deadline).setHours(0,0,0,0).valueOf()<=dateFromState.setHours(0,0,0,0).valueOf();});upcomingTasks=upcomingTasks.map(function(task){task['spanText']=new Date(task.deadline).setHours(0,0,0,0).valueOf()===dateFromState.setHours(0,0,0,0).valueOf()?'Due Today':'Past Due';return task;});return React.createElement(\"div\",null,React.createElement(Card,null,React.createElement(Card.Header,{style:{backgroundColor:'#0033CC',color:\"#fff\"}},\"Upcoming Tasks \",React.createElement(\"i\",{className:\"fa fa-fw fa-caret-up\",style:{fontSize:'1em',marginLeft:5}})),upcomingTasks.map(function(task){return React.createElement(ListGroup.Item,{className:\"d-flex\",key:\"list-group-item-\".concat(task.id)},task.title,getSpanText(task.spanText,completeTask,task));}),upcomingTasks.length===0?React.createElement(\"h5\",{style:{marginTop:5,alignSelf:'center'}},\"No Upcoming Task!\"):console.log(upcomingTasks)));};export default UpcomingTasks;","map":{"version":3,"sources":["/Users/emskaplann/final_projects/03-module/emskaplann.github.io/to-do-app/src/components/sub-components/UpcomingTasks.js"],"names":["React","Card","ListGroup","getSpanText","text","completeTask","task","id","fontSize","color","marginLeft","UpcomingTasks","tasks","dateFromState","upcomingTasks","filter","Date","deadline","setHours","valueOf","map","backgroundColor","title","spanText","length","marginTop","alignSelf","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, ListGroup } from 'react-bootstrap'\n\nconst getSpanText = (text, completeTask, task) => {\n  if (text === 'Due Today') {\n    return <span className='flex-fill text-right'>{text}<i onClick={() => completeTask(task.id)} className=\"fa fa-fw fa-check\" style={{ fontSize: '1.5em', color: '#d3d3d3', marginLeft: 3 }} /></span>\n  }\n  return <span className='flex-fill text-right'><i style={{ color: \"red\" }}>{text}</i><i onClick={() => completeTask(task.id)} className=\"fa fa-fw fa-check\" style={{ fontSize: '1.5em', color: '#d3d3d3', marginLeft: 3 }} /></span>\n}\n\nconst UpcomingTasks = ({ tasks, dateFromState, completeTask }) => {\n  // console.log(dateFromState)\n  // console.log(tasks)\n  let upcomingTasks = tasks.filter(task => new Date(task.deadline).setHours(0, 0, 0, 0).valueOf() <= dateFromState.setHours(0, 0, 0, 0).valueOf())\n  upcomingTasks = upcomingTasks.map(task => {\n    task['spanText'] = new Date(task.deadline).setHours(0, 0, 0, 0).valueOf() === dateFromState.setHours(0, 0, 0, 0).valueOf() ? 'Due Today' : 'Past Due'\n    return task\n  })\n  return (\n    <div>\n      <Card>\n        <Card.Header style={{ backgroundColor: '#0033CC', color: \"#fff\" }}>\n          Upcoming Tasks <i className=\"fa fa-fw fa-caret-up\" style={{ fontSize: '1em', marginLeft: 5 }} />\n        </Card.Header>\n        {upcomingTasks.map(task => {\n          return (\n            <ListGroup.Item className='d-flex' key={`list-group-item-${task.id}`}>\n              {task.title}\n              {getSpanText(task.spanText, completeTask, task)}\n            </ListGroup.Item>)\n        }\n        )}\n        {upcomingTasks.length === 0 ? <h5 style={{marginTop: 5, alignSelf: 'center'}}>No Upcoming Task!</h5> : console.log(upcomingTasks) }\n      </Card>\n    </div>\n  )\n}\n\nexport default UpcomingTasks\n"]},"metadata":{},"sourceType":"module"}