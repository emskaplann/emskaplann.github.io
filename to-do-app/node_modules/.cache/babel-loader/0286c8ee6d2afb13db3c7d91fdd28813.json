{"ast":null,"code":"class NoteService {\n  constructor(component) {\n    this.fetchNotesForProject = projectId => {\n      fetch(\"\".concat(this.workingURL, \"/projects/\").concat(projectId, \"/notes\"), {\n        headers: {\n          \"Authorization\": this.component.props.authProps.token\n        }\n      }).then(response => response.json()).then(notes => this.component.setState({\n        notes\n      }));\n    };\n\n    this.createNote = (note, projectId) => {\n      fetch(\"\".concat(this.workingURL, \"/projects/\").concat(projectId, \"/notes\"), {\n        headers: {\n          \"Authorization\": this.component.props.authProps.token,\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify(note),\n        method: 'POST'\n      }).then(response => response.json()).then(note => {\n        this.component.setState({\n          notes: [...this.component.state.notes, note]\n        });\n      });\n    };\n\n    this.deleteNote = noteId => {\n      fetch(\"\".concat(this.workingURL, \"/notes/\").concat(noteId), {\n        //eslint-disable-line \n        method: 'DELETE',\n        headers: {\n          \"Authorization\": this.component.props.authProps.token,\n          'content-type': 'application/json',\n          Accept: 'application/json'\n        }\n      }).then(response => response.json()).then(deletedNote => {\n        const notes = this.component.state.notes;\n        this.component.setState({\n          notes: notes.filter(note => note.id !== deletedNote.id)\n        });\n      });\n    };\n\n    this.component = component;\n    this.workingURL = 'https://arcane-sands-50858.herokuapp.com'; // this.workingURL = 'http://localhost:3000'\n  }\n\n}\n\nexport default NoteService;","map":{"version":3,"sources":["/Users/emskaplann/final_projects/04-module/to-do-app-frontend/src/services/NoteService.js"],"names":["NoteService","constructor","component","fetchNotesForProject","projectId","fetch","workingURL","headers","props","authProps","token","then","response","json","notes","setState","createNote","note","Accept","body","JSON","stringify","method","state","deleteNote","noteId","deletedNote","filter","id"],"mappings":"AAAA,MAAMA,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAOvBC,oBAPuB,GAOCC,SAAD,IAAe;AACpCC,MAAAA,KAAK,WAAI,KAAKC,UAAT,uBAAgCF,SAAhC,aAAmD;AACtDG,QAAAA,OAAO,EAAE;AACP,2BAAiB,KAAKL,SAAL,CAAeM,KAAf,CAAqBC,SAArB,CAA+BC;AADzC;AAD6C,OAAnD,CAAL,CAKGC,IALH,CAKQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALpB,EAMGF,IANH,CAMQG,KAAK,IAAI,KAAKZ,SAAL,CAAea,QAAf,CAAwB;AAAED,QAAAA;AAAF,OAAxB,CANjB;AAOD,KAfsB;;AAAA,SAiBvBE,UAjBuB,GAiBV,CAACC,IAAD,EAAOb,SAAP,KAAqB;AAChCC,MAAAA,KAAK,WAAI,KAAKC,UAAT,uBAAgCF,SAAhC,aAAmD;AACtDG,QAAAA,OAAO,EAAE;AACP,2BAAiB,KAAKL,SAAL,CAAeM,KAAf,CAAqBC,SAArB,CAA+BC,KADzC;AAEP,0BAAgB,kBAFT;AAGPQ,UAAAA,MAAM,EAAE;AAHD,SAD6C;AAMtDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CANgD;AAOtDK,QAAAA,MAAM,EAAE;AAP8C,OAAnD,CAAL,CASGX,IATH,CASQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATpB,EAUGF,IAVH,CAUQM,IAAI,IAAI;AACZ,aAAKf,SAAL,CAAea,QAAf,CAAwB;AACtBD,UAAAA,KAAK,EAAE,CAAC,GAAG,KAAKZ,SAAL,CAAeqB,KAAf,CAAqBT,KAAzB,EAAgCG,IAAhC;AADe,SAAxB;AAGD,OAdH;AAeD,KAjCsB;;AAAA,SAmCvBO,UAnCuB,GAmCTC,MAAD,IAAY;AACvBpB,MAAAA,KAAK,WAAI,KAAKC,UAAT,oBAA6BmB,MAA7B,GAAuC;AAAE;AAC5CH,QAAAA,MAAM,EAAE,QADkC;AAE1Cf,QAAAA,OAAO,EAAE;AACP,2BAAiB,KAAKL,SAAL,CAAeM,KAAf,CAAqBC,SAArB,CAA+BC,KADzC;AAEP,0BAAgB,kBAFT;AAGPQ,UAAAA,MAAM,EAAE;AAHD;AAFiC,OAAvC,CAAL,CAQGP,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EASGF,IATH,CASQe,WAAW,IAAI;AACnB,cAAMZ,KAAK,GAAG,KAAKZ,SAAL,CAAeqB,KAAf,CAAqBT,KAAnC;AACA,aAAKZ,SAAL,CAAea,QAAf,CAAwB;AACtBD,UAAAA,KAAK,EAAEA,KAAK,CAACa,MAAN,CAAaV,IAAI,IAAIA,IAAI,CAACW,EAAL,KAAYF,WAAW,CAACE,EAA7C;AADe,SAAxB;AAGD,OAdH;AAeD,KAnDsB;;AACrB,SAAK1B,SAAL,GAAiBA,SAAjB;AACA,SAAKI,UAAL,GAAkB,0CAAlB,CAFqB,CAGrB;AAED;;AANe;;AAuDlB,eAAeN,WAAf","sourcesContent":["class NoteService {\n  constructor(component) {\n    this.component = component\n    this.workingURL = 'https://arcane-sands-50858.herokuapp.com'\n    // this.workingURL = 'http://localhost:3000'\n\n  }\n\n  fetchNotesForProject = (projectId) => {\n    fetch(`${this.workingURL}/projects/${projectId}/notes`, {\n      headers: {\n        \"Authorization\": this.component.props.authProps.token\n      }\n    })\n      .then(response => response.json())\n      .then(notes => this.component.setState({ notes }))\n  }\n\n  createNote = (note, projectId) => {\n    fetch(`${this.workingURL}/projects/${projectId}/notes`, {\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(note),\n      method: 'POST'\n    })\n      .then(response => response.json())\n      .then(note => {\n        this.component.setState({\n          notes: [...this.component.state.notes, note]\n        })\n      })\n  }\n\n  deleteNote = (noteId) => {\n    fetch(`${this.workingURL}/notes/${noteId}`, { //eslint-disable-line \n      method: 'DELETE',\n      headers: {\n        \"Authorization\": this.component.props.authProps.token,\n        'content-type': 'application/json',\n        Accept: 'application/json'\n      },\n    })\n      .then(response => response.json())\n      .then(deletedNote => {\n        const notes = this.component.state.notes\n        this.component.setState({\n          notes: notes.filter(note => note.id !== deletedNote.id)\n        })\n      })\n  }\n}\n\nexport default NoteService\n"]},"metadata":{},"sourceType":"module"}