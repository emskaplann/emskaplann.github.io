{"ast":null,"code":"class TaskService {\n  constructor(component) {\n    this.fetchAllTasksFor = projectId => {\n      fetch(\"\".concat(this.workingURL, \"/projects/\").concat(projectId, \"/tasks\")).then(response => response.json()).then(tasks => this.component.setState({\n        tasks\n      }));\n    };\n\n    this.completeTask = taskId => {\n      fetch(\"\".concat(this.workingURL, \"/tasks/\").concat(taskId), {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          task: {\n            is_completed: true\n          }\n        })\n      }).then(r => r.json()).then(editedTask => {\n        const project = this.component.state.projects.find(project => project.id === editedTask.project_id);\n        const projectCopy = Object.assign({}, project);\n        projectCopy.tasks = projectCopy.tasks.map(task => task.id === editedTask.id ? editedTask : task);\n        const newProjects = this.component.state.projects.map(project => project.id === projectCopy.id ? projectCopy : project);\n        this.component.setState({\n          projects: newProjects,\n          allTasks: newProjects.map(project => project.tasks).flat()\n        });\n      });\n    };\n\n    this.component = component;\n    this.workingURL = 'https://arcane-sands-50858.herokuapp.com'; // this.workingURL = 'http://localhost:3000'\n  }\n\n}\n\nexport default TaskService;","map":{"version":3,"sources":["/Users/emskaplann/final_projects/04-module/to-do-app-frontend/src/services/TaskService.js"],"names":["TaskService","constructor","component","fetchAllTasksFor","projectId","fetch","workingURL","then","response","json","tasks","setState","completeTask","taskId","method","headers","Accept","body","JSON","stringify","task","is_completed","r","editedTask","project","state","projects","find","id","project_id","projectCopy","Object","assign","map","newProjects","allTasks","flat"],"mappings":"AAAA,MAAMA,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAMvBC,gBANuB,GAMHC,SAAD,IAAe;AAChCC,MAAAA,KAAK,WAAI,KAAKC,UAAT,uBAAgCF,SAAhC,YAAL,CACGG,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,KAAK,IAAI,KAAKR,SAAL,CAAeS,QAAf,CAAwB;AAAED,QAAAA;AAAF,OAAxB,CAFjB;AAGD,KAVsB;;AAAA,SAYvBE,YAZuB,GAYPC,MAAD,IAAY;AACzBR,MAAAA,KAAK,WAAI,KAAKC,UAAT,oBAA6BO,MAA7B,GAAuC;AAC1CC,QAAAA,MAAM,EAAE,OADkC;AAE1CC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD,SAFiC;AAKvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACtBC,UAAAA,IAAI,EAAE;AACJC,YAAAA,YAAY,EAAE;AADV;AADgB,SAAf;AALiC,OAAvC,CAAL,CAWCd,IAXD,CAWMe,CAAC,IAAIA,CAAC,CAACb,IAAF,EAXX,EAYCF,IAZD,CAYMgB,UAAU,IAAI;AAClB,cAAMC,OAAO,GAAG,KAAKtB,SAAL,CAAeuB,KAAf,CAAqBC,QAArB,CAA8BC,IAA9B,CAAmCH,OAAO,IAAIA,OAAO,CAACI,EAAR,KAAeL,UAAU,CAACM,UAAxE,CAAhB;AACA,cAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,OAAlB,CAApB;AACAM,QAAAA,WAAW,CAACpB,KAAZ,GAAoBoB,WAAW,CAACpB,KAAZ,CAAkBuB,GAAlB,CAAsBb,IAAI,IAAIA,IAAI,CAACQ,EAAL,KAAYL,UAAU,CAACK,EAAvB,GAA4BL,UAA5B,GAAyCH,IAAvE,CAApB;AACA,cAAMc,WAAW,GAAG,KAAKhC,SAAL,CAAeuB,KAAf,CAAqBC,QAArB,CAA8BO,GAA9B,CAAkCT,OAAO,IAAIA,OAAO,CAACI,EAAR,KAAeE,WAAW,CAACF,EAA3B,GAAgCE,WAAhC,GAA8CN,OAA3F,CAApB;AACA,aAAKtB,SAAL,CAAeS,QAAf,CAAwB;AACtBe,UAAAA,QAAQ,EAAEQ,WADY;AAEtBC,UAAAA,QAAQ,EAAED,WAAW,CAACD,GAAZ,CAAgBT,OAAO,IAAIA,OAAO,CAACd,KAAnC,EAA0C0B,IAA1C;AAFY,SAAxB;AAID,OArBD;AAsBD,KAnCsB;;AACrB,SAAKlC,SAAL,GAAiBA,SAAjB;AACA,SAAKI,UAAL,GAAkB,0CAAlB,CAFqB,CAGrB;AACD;;AALe;;AAuClB,eAAeN,WAAf","sourcesContent":["class TaskService {\n  constructor(component) {\n    this.component = component\n    this.workingURL = 'https://arcane-sands-50858.herokuapp.com'\n    // this.workingURL = 'http://localhost:3000'\n  }\n\n  fetchAllTasksFor = (projectId) => {\n    fetch(`${this.workingURL}/projects/${projectId}/tasks`)\n      .then(response => response.json())\n      .then(tasks => this.component.setState({ tasks }))\n  }\n\n  completeTask = (taskId) => {\n    fetch(`${this.workingURL}/tasks/${taskId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }, body: JSON.stringify({\n        task: {\n          is_completed: true\n        }\n      })\n    })\n    .then(r => r.json())\n    .then(editedTask => {\n      const project = this.component.state.projects.find(project => project.id === editedTask.project_id)\n      const projectCopy = Object.assign({}, project)\n      projectCopy.tasks = projectCopy.tasks.map(task => task.id === editedTask.id ? editedTask : task)\n      const newProjects = this.component.state.projects.map(project => project.id === projectCopy.id ? projectCopy : project)\n      this.component.setState({\n        projects: newProjects,\n        allTasks: newProjects.map(project => project.tasks).flat()\n      })\n    })\n  }\n}\n\nexport default TaskService\n"]},"metadata":{},"sourceType":"module"}